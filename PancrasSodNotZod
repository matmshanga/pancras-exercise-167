package edu.cpt167.pancras.execise6;

import java.util.Scanner;

//AUTHOR: [MATRONA PANCRAS]
//COURSE: CPT167
//PURPOSE: [To calculate a discount rate by using decision based of the level of age]
//PURPOSE: [and membership and display all the total transaction and final grand total]
//START: [10/06/2020]

public class MainClass 
{
	//CONSTANTS
	public static final String DISCOUNT_NAME_MEMBER = "Member";
	public static final String DISCOUNT_NAME_SENIOR = "Senior";
	public static final String DISCOUNT_NAME_NONE = "No Discount";
	public static final String DISCOUNT_NAME_QUIT = "Quit";
	public static final double DISCOUNT_RATE_MEMBER = 0.15;
	public static final double DISCOUNT_RATE_SENIOR = 0.25;
	public static final double DISCOUNT_RATE_NONE = 0.0;
	public static final String ITEM_NAME_PREMIUM = "Potatoes";
	public static final String ITEM_NAME_SPECIAL = "Sandwich";
	public static final String ITEM_NAME_BASIC = "Chiken";
	public static final String ITEM_NAME_RETURN = "Return to Main Menu";
	public static final double ITEM_PRICE_PREMIUM = 55.95;
	public static final double ITEM_PRICE_SPECIAL = 24.95;
	public static final double ITEM_PRICE_BASIC = 15.95;
	public static final int RESET_VALUE = 0;
	public static final double TAX_RATE = .075;

	//Welcome Banner
	private static void displayWelcomBanner() 
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println ("Welcome to Our Store program!");
		System.out.println("This program will help to calculate total");
		System.out.println("transactionbased age and membership, and");
		System.out.println("display total order and final report");
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}

	//Farewell Message
	private static void displayFarewellMessage() 
	{
		System.out.println("\n****************************************");
		System.out.println("Thank you for chosing Discount store!");
		System.out.print("We appreciate your business, enjoy your day");
		System.out.print("\n****************************************");
	}

	//Print Final report to the console
	//no value is returned to main
	private static void displayItemReceipt(String borrowedItemName,double borrowedItemPrice, 
			String borrowedDiscountName, double borrowedDiscountRate,
			double borrowedDiscountAmount,double borrowedDiscountPrice,  int borrowedHowMany, 
			double borrowedPurchaseAmt, double borrowedSubTotal)
	{
		//Display Item report
		System.out.print("\n~~~ ~~~ ~~~~ ~~~~ ~~~ ~~~~ ~~~~");
		System.out.println ("\nItem Report.");
		System.out.println("\n~~~ ~~~ ~~~~ ~~~~ ~~~ ~~~~ ~~~~");
		System.out.printf("%-24s%-11s\n", "Item Name", borrowedItemName);
		System.out.printf("%-20s%5s%10.2f\n", "Original Price", "$", borrowedItemPrice);
		System.out.printf("%-24s%-11s\n", "Discount Type", borrowedDiscountName);//2 column
		System.out.printf("%-20s%5s%9.1f%1s\n", "Discount Rate", "", borrowedDiscountRate * 100, "%");
		System.out.printf("%-20s%5s%10.2f\n", "Discount Amount ", "$", borrowedDiscountAmount );//4 column
		System.out.printf("%-20s%5s%10.2f\n", "Discounted Price", "$", borrowedDiscountPrice);
		System.out.printf("%-25s%10d\n", "Quantity", borrowedHowMany);
		System.out.printf("%-20s%5s%10.2f\n", "Purchase Amount", "$", borrowedPurchaseAmt);
		System.out.printf("%-20s%5s%10.2f\n", "Subtotal", "$", borrowedSubTotal);
	}

	//Print Final report to the console
	//no value is returned to main
	private static void displayOrderTotal(String borrowedUserName, double borrowedSubTotal, 
			double borrowedTax, double borrowedTotalCost) 
	{
		//display total order
		System.out.print("\n~~~ ~~~ ~~~~ ~~~~ ~~~ ~~~~ ~~~~");
		System.out.println ("\nOrder Report.");
		System.out.println("\n~~~ ~~~ ~~~~ ~~~~ ~~~ ~~~~ ~~~~");
		System.out.printf("%-24s%-10s\n", "User", borrowedUserName);//prompts name
		System.out.printf("%-20s%5s%8.2f\n", "Subtotal", "$", borrowedSubTotal);//prompts calculation result
		System.out.printf("%-20s%5s%8.2f\n", "Tax", "$", borrowedTax);//prompts calculation result
		System.out.printf("%-20s%5s%8.2f\n", "Total Cost", "$", borrowedTotalCost);//prompts calculation result
	}

	//Print Final report to the console
	//no value is returned to main
	private static void displayFinalReport(int borrowedMemberCount, int borrowedSeniorCount, 
			int borrowedNoDiscountCount, int borrowedPremiumCount,
			int borrowedSpecialCount, int borrowedBasicCount, double borrowedGrandTotal) 
	{
		//Display Final report
		System.out.println("\n~~~ ~~~ ~~~~ ~~~~ ~~~ ~~~~ ~~~~");
		System.out.print("Final Report.");
		System.out.println("\n~~~ ~~~ ~~~~ ~~~~ ~~~ ~~~~ ~~~~");
		System.out.print("Count of discount types:" + "\n");
		System.out.printf("%-31s%-12d\n", "[constant name]", borrowedMemberCount);
		System.out.printf("%-31s%-12d\n", "[constant name]", borrowedSeniorCount);
		System.out.printf("%-31s%-12d\n", "[constant name]", borrowedNoDiscountCount);
		System.out.print("Count of discount types:" + "\n");
		System.out.printf("%-31s%-12d\n", "[constant name]", borrowedPremiumCount);
		System.out.printf("%-31s%-12d\n", "[constant name]",  borrowedSpecialCount);
		System.out.printf("%-31s%-12d\n", "[constant name]", borrowedBasicCount);
		System.out.print("\n~~~ ~~~ ~~~~ ~~~~ ~~~ ~~~~ ~~~~~~~~~" + "\n");
		System.out.printf("%-20s%5s%7.2f\n", "Grand Total", "$", borrowedGrandTotal);


	}//END of report method	

	//display Main menu
	private static void displayMainMenu()
	{
		//Display Main menu
		System.out.print("\n~~~ ~~~~ ~~~ ~~~~ ~~~~ ~~~~~~ ~~~~~");
		System.out.println("\nDISCOUNT MENU"); //menu title
		System.out.printf("%-7s%-11s%-2s%5s%.1s\n", "[A] for ", DISCOUNT_NAME_MEMBER, "",
				DISCOUNT_RATE_MEMBER * 100, "%");
		System.out.printf("%-7s%-11s%-2s%5s%.1s\n", "[B] for ", DISCOUNT_NAME_SENIOR, "",
				DISCOUNT_RATE_SENIOR * 100, "%");
		System.out.printf("%-7s%-11s%-2s%5s%.1s\n", "[C] for ", DISCOUNT_NAME_NONE, "",
				DISCOUNT_RATE_NONE * 100, "%");
		System.out.printf("%-7s%-11s\n", "[Q] to ", DISCOUNT_NAME_QUIT);
		System.out.print("\n~~~ ~~~~ ~~~ ~~~~ ~~~~ ~~~~~~ ~~~~~");
		System.out.print("\nEnter discount selection here");
	}
	private static void displayItemMenu()
	{
		//Display item menu
		System.out.print("\n~~~ ~~~~ ~~~ ~~~~ ~~~~ ~~~~~~ ~~~~~");
		System.out.println("\nITEM MENU"); //menu title
		System.out.printf("%-7s%-11s%-2s%-6.2f\n", "[A] for ", ITEM_NAME_PREMIUM, "$",
				ITEM_PRICE_PREMIUM );
		System.out.printf("%-7s%-11s%-2s%-6.2f\n", "[B] for ", ITEM_NAME_SPECIAL, "$",
				ITEM_PRICE_SPECIAL);
		System.out.printf("%-7s%-11s%-2s%-6.2f\n", "[C] for ", ITEM_NAME_BASIC, "$",
				ITEM_PRICE_BASIC);
		System.out.printf("%-4s%-11s\n", "[R]", ITEM_NAME_RETURN);
		System.out.print("\n~~~ ~~~~ ~~~ ~~~~ ~~~~ ~~~~~ ~~~~~");
		System.out.print("\nEnter item selection here");

	}//END of Void Method

	//VR Method
	//request ID from the user and validates the input
	//before returning the validate value back to main
	private static String getUserName(Scanner borrowedInput)//Scanner was declared and renamed
	{
		String localUserName = "";
		System.out.print("Please, enter your first name");
		localUserName = borrowedInput.next();
		System.out.println("\nThank you," +  localUserName);
		return localUserName;
	}
	//request ID from the user and validates the input
	//before returning the validate value back to main
	private static char validateMainMenu(Scanner borrowedInput) 
	{
		char localSelection = ' ';
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//must validate input
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C' && localSelection != 'Q')
		{
			System.out.println("\nInvalid  Selection");
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}
		return localSelection;
	}//END of id VR method

	//request ID from the user and validates the input
	//before returning the validate value back to main
	private static char validateItemMenu(Scanner borrowedInput) 
	{
		char localSelection = ' ';
		displayItemMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//must validate input
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C' && localSelection != 'R')
		{
			System.out.println("\nInvalid Item Selected");	
			displayItemMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}
		return localSelection;
	}//END of id VR method

	//request ID from the user and validates the input
	//before returning the validate value back to main
	private static int validateHowMany(Scanner borrowedInput) 
	{
		int localHowMany = 0;
		System.out.print("\nEnter the Quantity");
		localHowMany = borrowedInput.nextInt();
		System.out.println();
		//must validate input
		while (localHowMany <= 0)	
		{
			System.out.println("Quantity cannot be less than 0. \n");
			System .out.print("\nEnter the latest quantity");
			localHowMany = borrowedInput.nextInt();
			System.out.println();
		}
		return localHowMany;
	}//END of  VR method


	public static void main(String[] args) 
	{
		Scanner input = new Scanner(System.in);

		//Declaration and initialization of variables
		String userName = "";
		String discountName = "";
		String itemName = "";
		char rateSelection = ' ';
		char itemSelection = ' ';
		int howMany = 0;
		int memberCount = 0;
		int seniorCount = 0;
		int noDiscountCount = 0;
		int premiumCount = 0;
		int specialCount = 0;
		int basicCount = 0;
		double purchaseAmt = 0.0;
		double discountRate = 0.0;
		double itemPrice = 0.0;
		double discountAmount = 0.0;
		double discountPrice = 0.0;
		double subTotal = 0.0;
		double tax = 0.0;
		double totalCost = 0.0;
		double grandTotal = 0.0;

		//Welcome Banner
		displayWelcomBanner();

		//INPUT SECTION
		userName = getUserName(input);

		//Prime read
		rateSelection = validateMainMenu(input);

		//run-while'
		while (rateSelection != 'Q')
		{
			//get and validate selection
			itemSelection = validateItemMenu(input);

			//Prime read
			while (itemSelection != 'R')
			{ 
				//get and validate selection
				howMany = validateHowMany(input);	

				//test Rate selection
				if (rateSelection == 'A')
				{
					discountName = DISCOUNT_NAME_MEMBER;
					discountRate = DISCOUNT_RATE_MEMBER;
				}
				else if (rateSelection == 'B' )
				{
					discountName = DISCOUNT_NAME_SENIOR;
					discountRate = DISCOUNT_RATE_SENIOR;
				}
				else
				{
					discountName = DISCOUNT_NAME_NONE;
					discountRate = DISCOUNT_RATE_NONE;
				}

				//increment counter
				memberCount++;
				seniorCount++;
				noDiscountCount++;

				//test item selection
				if (itemSelection == 'A')
				{
					itemName = ITEM_NAME_PREMIUM;
					itemPrice = ITEM_PRICE_PREMIUM;
				}
				else if (itemSelection == 'B')
				{
					itemName = ITEM_NAME_SPECIAL;
					itemPrice = ITEM_PRICE_SPECIAL;
				}
				else
				{
					itemName = ITEM_NAME_BASIC;
					itemPrice = ITEM_PRICE_BASIC;
				}

				//Calculate Accumulator
				discountAmount = itemPrice * discountRate; //assign calculation results to the variables 
				discountPrice = itemPrice - discountAmount;//assign calculation results to the variables
				purchaseAmt = howMany * discountPrice;//prompts result
				subTotal = purchaseAmt + subTotal; //prompt result



				//OUTPUT SELECTION

				//print individual transaction report
				displayItemReceipt(itemName, itemPrice, discountName, 
						discountRate, discountAmount, discountPrice, 
						howMany, purchaseAmt, subTotal);

				//modify LCV with an Update selection
				itemSelection = validateItemMenu(input);
			}//END OF RUN WHILE

			//modify LCV with an Update
			tax = subTotal * TAX_RATE;//prompt result
			totalCost = subTotal + tax;//prompt result
			grandTotal = grandTotal + totalCost;//prompt result

			//print total order
			displayOrderTotal(userName, subTotal, tax, totalCost);

			//modify LCV with an Update
			subTotal = RESET_VALUE;//print results to the variable
			//modify LCV with an Update
			rateSelection = validateMainMenu(input);
		}//END OF RUN WHILE 

		//test for transaction before printing
		if (grandTotal > 0.0)
		{
			//call to print final report
			displayFinalReport(memberCount, seniorCount, noDiscountCount,
					premiumCount, specialCount, basicCount, grandTotal);
		}//END of report selection structure

		//Farewell Message
		displayFarewellMessage();
		//Close scanner
		input.close();

	}//END OF main method
}//END OF class method
